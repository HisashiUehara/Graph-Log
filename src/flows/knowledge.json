{
  "version": 0.5,
  "nodes": {
    "source": {
      "value": {
        "query": "",
        "context": ""
      }
    },
    "knowledge": {
      "agent": "knowledgeAgent",
      "inputs": {
        "query": ":source.query",
        "context": ":source.context"
      }
    },
    "errorCheck": {
      "agent": "conditionalAgent",
      "inputs": {
        "condition": ":knowledge.error",
        "ifTrue": {
          "answer": ":knowledge.error",
          "success": false
        },
        "ifFalse": {
          "content": ":knowledge.content",
          "success": true
        }
      }
    },
    "chunks": {
      "agent": "stringSplitterAgent",
      "inputs": {
        "text": ":errorCheck.content"
      },
      "params": {
        "maxLength": 1000
      },
      "skipIf": "!:errorCheck.success"
    },
    "chunkEmbeddings": {
      "agent": "stringEmbeddingsAgent",
      "inputs": {
        "array": ":chunks.contents"
      },
      "params": {
        "model": "text-embedding-3-small"
      },
      "skipIf": "!:errorCheck.success"
    },
    "queryEmbedding": {
      "agent": "stringEmbeddingsAgent",
      "inputs": {
        "item": ":source.query"
      },
      "params": {
        "model": "text-embedding-3-small"
      },
      "skipIf": "!:errorCheck.success"
    },
    "similarities": {
      "agent": "dotProductAgent",
      "inputs": {
        "matrix": ":chunkEmbeddings",
        "vector": ":queryEmbedding.$0"
      },
      "skipIf": "!:errorCheck.success"
    },
    "relevantChunks": {
      "agent": "sortByValuesAgent",
      "inputs": {
        "array": ":chunks.contents",
        "values": ":similarities"
      },
      "skipIf": "!:errorCheck.success"
    },
    "context": {
      "agent": "tokenBoundStringsAgent",
      "inputs": {
        "chunks": ":relevantChunks"
      },
      "params": {
        "limit": 2000
      },
      "skipIf": "!:errorCheck.success"
    },
    "answer": {
      "agent": "openAIAgent",
      "inputs": {
        "system": "You are a helpful assistant. Answer the question based on the provided context.",
        "prompt": ":source.query",
        "context": ":errorCheck.success ? :context.content : :errorCheck.answer"
      },
      "params": {
        "model": "gpt-4-turbo-preview"
      },
      "isResult": true
    }
  }
} 